// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/02/ALU.hdl
/**
 * ALU (Arithmetic Logic Unit):
 * Computes out = one of the following functions:
 *                0, 1, -1,
 *                x, y, !x, !y, -x, -y,
 *                x + 1, y + 1, x - 1, y - 1,
 *                x + y, x - y, y - x,
 *                x & y, x | y
 * on the 16-bit inputs x, y,
 * according to the input bits zx, nx, zy, ny, f, no.
 * In addition, computes the output bits:
 * zr = (out == 0, 1, 0)
 * ng = (out < 0,  1, 0)
 */
// Implementation: Manipulates the x and y inputs
// and operates on the resulting values, as follows:
// if (zx == 1) sets x = 0        // 16-bit constant
// if (nx == 1) sets x = !x       // bitwise not
// if (zy == 1) sets y = 0        // 16-bit constant
// if (ny == 1) sets y = !y       // bitwise not
// if (f == 1)  sets out = x + y  // integer 2's complement addition
// if (f == 0)  sets out = x & y  // bitwise and
// if (no == 1) sets out = !out   // bitwise not
CHIP ALU {
    IN  
        x[16], y[16],  // 16-bit inputs        
        zx, // zero the x input?
        nx, // negate the x input?
        zy, // zero the y input?
        ny, // negate the y input?
        f,  // compute (out = x + y) or (out = x & y)?
        no; // negate the out output?
    OUT 
        out[16], // 16-bit output
        zr,      // (out == 0, 1, 0)
        ng;      // (out < 0,  1, 0)

    PARTS:
    Not16(in=true, out=zero16);
    // Select either X or ZERO for the x's value 
    Mux16(a=x, b=zero16, sel=zx, out=muxzx);
    // Calculate flipped X (not X)
    Not16(in=muxzx, out=notmuxzx);
    // We select X or Flipped X
    Mux16(a=muxzx, b=notmuxzx, sel=nx, out=finalX);

    // Same instructions as before but for Y
    Mux16(a=y, b=zero16, sel=zy, out=muxzy);
    Not16(in=muxzy, out=notmuxzy);
    Mux16(a=muxzy, b=notmuxzy, sel=ny, out=finalY);

    // Calculate ADD
    Add16(a=finalX, b=finalY, out=addResult);
    // Calculate AND
    And16(a=finalX, b=finalY, out=andResult);

    // Select computed output
    Mux16(a=andResult, b=addResult, sel=f, out=iOut);
    // Calculate flipped output
    Not16(in=iOut, out=nOut);

    // We select between output or flipped output 
    // We split into left-right 
    // We output the selected value
    Mux16(a=iOut, b=nOut, sel=no,out[0..7]=right8, out[8..15]=left8, out=out);
    
    // Check if any pins are set to 1
    Or8Way(in=left8, out=left);
    Or8Way(in=right8, out=right);

    // Flip left and right (if we found a 1, this'll become 0)
    Not(in=left, out=notLeft);
    Not(in=right, out=notRight);

    // If the flipped versions are both 1, it means the output is 0
    And(a=notLeft, b=notRight, out=zr);

    // Since we 2's complement , any bits set to 1 in left side of register, means the result is negative
    Mux(a=false, b=true, sel=left, out=ng);
}